<div class="w-full" style="background-color: <%= @form.background_color || '#ffffff' %>; color: <%= @form.font_color || '#000000' %>">
  <div class="px-4 py-6">
    <% if @form.logo.attached? %>
      <div class="mb-6">
        <%= image_tag @form.logo, class: "max-h-20 object-contain" %>
      </div>
    <% end %>
    
    <% if @form.company_name.present? %>
      <div class="mb-4 text-lg font-semibold">
        <%= @form.company_name %>
      </div>
    <% end %>

    <div class="mb-6">
      <h1 class="text-2xl font-bold mb-2"><%= @form.title %></h1>
      <% if @form.description.present? %>
        <p class="text-sm"><%= @form.description %></p>
      <% end %>
    </div>

    <%= form_with(url: submit_form_path(@form), method: :post, data: { turbo: false }, class: "relative") do |f| %>
      <div class="questions-container relative overflow-hidden" style="height: 300px;">
        <% @questions.each_with_index do |question, index| %>
          <div class="question-slide absolute w-full transition-transform duration-300 ease-in-out" 
               data-question-index="<%= index %>" 
               style="transform: translateX(<%= index == 0 ? '0%' : '100%' %>)">
            <div class="rounded-lg p-4" style="background-color: <%= color_with_opacity(@form.background_color || '#ffffff', 0.5) %>">
              <label class="block font-medium mb-2">
                <%= question.question_text %>
                <% if question.required? %>
                  <span class="text-red-500">*</span>
                <% end %>
              </label>

              <% case question.question_type %>
              <% when 'text' %>
                <%= f.text_field "question_#{question.id}", 
                    required: question.required, 
                    class: "mt-1 block w-full rounded-md border-0 px-3 py-2 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-emerald-500 sm:text-sm" %>
              <% when 'textarea' %>
                <%= f.text_area "question_#{question.id}", 
                    required: question.required, 
                    rows: 3, 
                    class: "mt-1 block w-full rounded-md border-0 px-3 py-2 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-emerald-500 sm:text-sm" %>
              <% when 'multiple_choice' %>
                <div class="mt-2 space-y-2">
                  <% question.options.each do |option| %>
                    <div class="flex items-center">
                      <%= f.radio_button "question_#{question.id}", 
                          option, 
                          required: question.required, 
                          class: "h-4 w-4 border-gray-300 text-emerald-600 focus:ring-emerald-500" %>
                      <label class="ml-3 block text-sm font-medium">
                        <%= option %>
                      </label>
                    </div>
                  <% end %>
                </div>
              <% end %>
            </div>

            <div class="mt-4 flex justify-between">
              <% if index > 0 %>
                <button type="button" 
                        class="prev-button rounded-md bg-gray-200 px-4 py-2 text-sm font-semibold text-gray-700 hover:bg-gray-300">
                  Previous
                </button>
              <% else %>
                <div></div>
              <% end %>

              <% if index < @questions.length - 1 %>
                <button type="button" 
                        class="next-button rounded-md bg-emerald-500 px-4 py-2 text-sm font-semibold text-white hover:bg-emerald-600">
                  Next
                </button>
              <% else %>
                <button type="button" 
                        class="review-button rounded-md bg-emerald-500 px-4 py-2 text-sm font-semibold text-white hover:bg-emerald-600">
                  Review Responses
                </button>
              <% end %>
            </div>
          </div>
        <% end %>

        <!-- Review slide -->
        <div class="question-slide absolute w-full transition-transform duration-300 ease-in-out" 
             data-question-index="<%= @questions.length %>" 
             style="transform: translateX(100%)">
          <%= render 'public/questions/review', f: f %>
        </div>
      </div>
    <% end %>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('form');
    const questions = form.querySelectorAll('.question-slide');
    let currentQuestionIndex = 0;
    let responses = {};

    // Add event listeners for next buttons
    form.querySelectorAll('.next-button').forEach(button => {
      button.addEventListener('click', function() {
        if (validateCurrentQuestion()) {
          const currentQuestion = questions[currentQuestionIndex];
          const nextQuestion = questions[currentQuestionIndex + 1];
          
          currentQuestion.style.transform = 'translateX(-100%)';
          nextQuestion.style.transform = 'translateX(0)';
          currentQuestionIndex++;
          focusFirstInput();
          updateResponses();
        }
      });
    });

    // Add event listener for review button
    form.querySelector('.review-button')?.addEventListener('click', function() {
      if (validateCurrentQuestion()) {
        const currentQuestion = questions[currentQuestionIndex];
        const reviewSlide = questions[questions.length - 1];
        
        currentQuestion.style.transform = 'translateX(-100%)';
        reviewSlide.style.transform = 'translateX(0)';
        currentQuestionIndex = questions.length - 1;
        updateResponses();
      }
    });

    // Add event listeners for previous buttons
    form.querySelectorAll('.prev-button').forEach(button => {
      button.addEventListener('click', function() {
        const currentQuestion = questions[currentQuestionIndex];
        const previousQuestion = questions[currentQuestionIndex - 1];
        
        currentQuestion.style.transform = 'translateX(100%)';
        previousQuestion.style.transform = 'translateX(0)';
        currentQuestionIndex--;
        focusFirstInput();
      });
    });

    // Add event listeners for input validation
    form.querySelectorAll('input, textarea').forEach(input => {
      input.addEventListener('input', function() {
        validateCurrentQuestion();
        updateResponses();
      });

      input.addEventListener('change', function() {
        validateCurrentQuestion();
        updateResponses();
      });
    });

    function updateResponses() {
      const inputs = form.querySelectorAll('input, textarea');
      inputs.forEach(input => {
        if (input.type === 'submit') return;
        
        const questionId = input.name.replace('question_', '');
        if (input.type === 'radio') {
          if (input.checked) {
            responses[questionId] = input.value;
          }
        } else {
          responses[questionId] = input.value;
        }
      });

      // Update review previews
      const previews = form.querySelectorAll('.response-preview');
      previews.forEach(preview => {
        const questionId = preview.dataset.questionId;
        const response = responses[questionId];
        preview.textContent = response || 'Not answered yet';
      });
    }

    function validateCurrentQuestion() {
      const currentQuestion = questions[currentQuestionIndex];
      const inputs = currentQuestion.querySelectorAll('input, textarea');
      let valid = true;

      inputs.forEach(input => {
        if (input.required && !input.value) {
          valid = false;
        }
        if (input.type === 'radio' && input.required) {
          const name = input.name;
          const checked = currentQuestion.querySelector(`input[name="${name}"]:checked`);
          if (!checked) {
            valid = false;
          }
        }
      });

      // Update next/review/submit button state
      const nextButton = currentQuestion.querySelector('.next-button');
      const reviewButton = currentQuestion.querySelector('.review-button');
      const submitButton = currentQuestion.querySelector('.submit-button');
      [nextButton, reviewButton, submitButton].forEach(button => {
        if (button) {
          button.disabled = !valid;
          button.style.opacity = valid ? '1' : '0.5';
        }
      });

      return valid;
    }

    function focusFirstInput() {
      const currentQuestion = questions[currentQuestionIndex];
      const firstInput = currentQuestion.querySelector('input, textarea');
      if (firstInput) {
        setTimeout(() => {
          firstInput.focus();
        }, 150);
      }
    }

    // Focus first input on load
    focusFirstInput();
    // Validate first question on load
    validateCurrentQuestion();
    // Initialize responses
    updateResponses();
  });
</script>
